/*
 * Copyright 2025 Hirokazu Kobayashi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.idp.server.platform.http;

import java.net.http.HttpRequest;
import java.util.UUID;
import org.idp.server.platform.log.LoggerWrapper;

/**
 * Manages idempotency keys for HTTP requests to prevent duplicate processing.
 *
 * <p>This class generates unique idempotency keys based on request characteristics and adds them as
 * HTTP headers to ensure that retry attempts with the same semantic content are treated as
 * duplicates by the server.
 *
 * <h3>Key Generation Strategy</h3>
 *
 * <p>Idempotency keys are generated using the following format:
 *
 * <pre>{@code idem_{requestHash}_{uuid8}}</pre>
 *
 * where:
 *
 * <ul>
 *   <li><strong>requestHash</strong>: Hash of HTTP method and URI for request uniqueness
 *   <li><strong>uuid8</strong>: First 8 characters of UUID for collision avoidance
 * </ul>
 *
 * <h3>Usage Pattern</h3>
 *
 * <ol>
 *   <li>Generate idempotency key for the original request
 *   <li>Add the key to HTTP request headers before sending
 *   <li>Reuse the same key for all retry attempts of the same request
 * </ol>
 *
 * <h3>HTTP Header</h3>
 *
 * <p>Idempotency keys are added as the standard {@code Idempotency-Key} header.
 *
 * @see HttpRequestExecutor#executeWithRetry(java.net.http.HttpRequest,
 *     org.idp.server.platform.oauth.OAuthAuthorizationConfiguration, HttpRetryConfiguration)
 */
public class IdempotencyKeyManager {

  private final LoggerWrapper log = LoggerWrapper.getLogger(IdempotencyKeyManager.class);

  /**
   * Generates a unique idempotency key for the given HTTP request.
   *
   * <p>The key is generated by combining a hash of the request method and URI with a random UUID
   * segment to ensure uniqueness while maintaining deterministic behavior for identical requests.
   *
   * @param request the HTTP request to generate an idempotency key for
   * @return a unique idempotency key in format "idem_{hash}_{uuid8}"
   */
  public String generateKey(HttpRequest request) {
    String requestHash = createRequestHash(request);
    String idempotencyKey =
        "idem_" + requestHash + "_" + UUID.randomUUID().toString().substring(0, 8);
    log.debug("Generated idempotency key: {} for request: {}", idempotencyKey, request.uri());
    return idempotencyKey;
  }

  /**
   * Adds an idempotency key to the HTTP request as a header.
   *
   * <p>Creates a new HTTP request with the same properties as the original but includes the
   * "Idempotency-Key" header. All existing headers are preserved in the new request.
   *
   * @param request the original HTTP request
   * @param idempotencyKey the idempotency key to add as a header
   * @return a new HTTP request with the idempotency key header added
   */
  public HttpRequest addIdempotencyKey(HttpRequest request, String idempotencyKey) {
    HttpRequest.Builder builder =
        HttpRequest.newBuilder()
            .uri(request.uri())
            .method(
                request.method(),
                request.bodyPublisher().orElse(HttpRequest.BodyPublishers.noBody()));

    // Copy existing headers
    request
        .headers()
        .map()
        .forEach(
            (name, values) -> {
              for (String value : values) {
                builder.header(name, value);
              }
            });

    // Add Idempotency-Key header
    builder.header("Idempotency-Key", idempotencyKey);

    log.debug("Added Idempotency-Key: {} to request: {}", idempotencyKey, request.uri());
    return builder.build();
  }

  private String createRequestHash(HttpRequest request) {
    String content = request.method() + ":" + request.uri().toString();
    return Integer.toHexString(content.hashCode());
  }
}
