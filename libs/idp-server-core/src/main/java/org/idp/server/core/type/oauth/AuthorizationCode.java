package org.idp.server.core.type.oauth;

import java.util.Objects;

/**
 * code
 *
 * <p>The authorization code generated by the authorization server. The authorization code MUST
 * expire shortly after it is issued to mitigate the risk of leaks. A maximum authorization code
 * lifetime of 10 minutes is RECOMMENDED. The client MUST NOT use the authorization code more than
 * once. If an authorization code is used more than once, the authorization server MUST deny the
 * request and SHOULD revoke (when possible) all tokens previously issued based on that
 * authorization code. The authorization code is bound to the client identifier and redirection URI.
 *
 * @see <a href="https://www.rfc-editor.org/rfc/rfc6749#section-4.1.2">4.1.2. Authorization
 *     Response</a>
 */
public class AuthorizationCode {
  String value;

  public AuthorizationCode() {}

  public AuthorizationCode(String value) {
    this.value = value;
  }

  public String value() {
    return value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    AuthorizationCode that = (AuthorizationCode) o;
    return Objects.equals(value, that.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value);
  }

  public boolean exists() {
    return Objects.nonNull(value) && !value.isEmpty();
  }
}
