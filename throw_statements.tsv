./libs/idp-server-springboot-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/adapters/springboot/notification/SmtpEmailSender.java	      throw new RuntimeException("Failed to send email", e);
./libs/idp-server-springboot-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/adapters/springboot/ProtectedResourceApiFilter.java	    throw new UnSupportedException("invalid request path");
./libs/idp-server-springboot-adapter/src/main/java/org/idp/server/adapters/springboot/notification/SmtpEmailSender.java	      throw new RuntimeException("Failed to send email", e);
./libs/idp-server-springboot-adapter/src/main/java/org/idp/server/adapters/springboot/ProtectedResourceApiFilter.java	    throw new UnSupportedException("invalid request path");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/tokenrevocation/validator/TokenRevocationValidator.java	      throw new TokenRevocationBadRequestException("invalid_request", "token revocation request must contains token parameters");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/CibaGrantValidator.java	      throw new TokenBadRequestException("unauthorized_client", "this request grant_type is ciba, but client does not authorize");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/CibaGrantValidator.java	      throw new TokenBadRequestException("unsupported_grant_type", "this request grant_type is ciba, but authorization server does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/CibaGrantValidator.java	      throw new TokenBadRequestException("token request does not contains auth_req_id, ciba grant must contains auth_req_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/CibaGrantValidator.java	      throw new TokenBadRequestException("token request does not contains client_id, ciba grant must contains client_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/TokenRequestValidator.java	      throw new TokenBadRequestException("token request must contains grant_type, but this request does not contains grant_type");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/TokenRequestValidator.java	      throw new TokenBadRequestException(String.format("token request must not contains duplicate value; keys (%s)", keysValue));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/TokenRequestCodeGrantValidator.java	      throw new TokenBadRequestException("token request does not contains code, authorization_code grant must contains code");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ClientCredentialsGrantValidator.java	      throw new TokenBadRequestException("unsupported_grant_type", "this request grant_type is password, but client does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ClientCredentialsGrantValidator.java	      throw new TokenBadRequestException("unsupported_grant_type", "this request grant_type is client_credentials, but client does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ClientCredentialsGrantValidator.java	      throw new TokenBadRequestException("unauthorized_client", "this request grant_type is client_credentials, but authorization server does not authorize");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/RefreshTokenGrantValidator.java	      throw new TokenBadRequestException("unauthorized_client", "this request grant_type is refresh_token, but client does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/RefreshTokenGrantValidator.java	      throw new TokenBadRequestException("unsupported_grant_type", "this request grant_type is refresh_token, but authorization server does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/RefreshTokenGrantValidator.java	      throw new TokenBadRequestException("token request does not contains refresh_token, refresh_token grant must contains refresh_token");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/RefreshTokenGrantValidator.java	      throw new TokenBadRequestException("token request does not contains client_id, password must contains client_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ResourceOwnerPasswordGrantValidator.java	      throw new TokenBadRequestException("unsupported_grant_type", "this request grant_type is password, but authorization server does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ResourceOwnerPasswordGrantValidator.java	      throw new TokenBadRequestException("unauthorized_client", "this request grant_type is password, but client does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ResourceOwnerPasswordGrantValidator.java	      throw new TokenBadRequestException("token request does not contains username, password grant must contains username");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ResourceOwnerPasswordGrantValidator.java	      throw new TokenBadRequestException("token request does not contains password, password grant must contains password");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/validator/ResourceOwnerPasswordGrantValidator.java	      throw new TokenBadRequestException("token request does not contains client_id, password must contains client_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/TokenProtocols.java	      throw new UnSupportedException("Unknown authorization provider " + provider.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/PkceVerifier.java	      throw new TokenBadRequestException("authorization request has code_challenge, but token request does not contains code verifier");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/PkceVerifier.java	        throw new TokenBadRequestException("code_verifier of token request does not match code_challenge of authorization request");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/PkceVerifier.java	      throw new TokenBadRequestException("code_verifier of token request does not match code_challenge of authorization request");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantBaseVerifier.java	      throw new TokenBadRequestException("unsupported_grant_type", "this request grant_type is authorization_code, but authorization server does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantBaseVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "this request grant_type is authorization_code, but client does not support");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantBaseVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("not found authorization code (%s)", tokenRequestContext.code().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantBaseVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("not found authorization code (%s)", tokenRequestContext.code().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantBaseVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("not found authorization code (%s)", tokenRequestContext.code().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantBaseVerifier.java	      throw new TokenBadRequestException(String.format("token request redirect_uri does not equals to authorization request redirect_uri (%s)", tokenRequestContext.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/ResourceOwnerPasswordGrantVerifier.java	      throw new TokenBadRequestException("does not found user by token request, or invalid password");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/ResourceOwnerPasswordGrantVerifier.java	      throw new TokenBadRequestException("invalid_scope", "token request does not contains valid scope");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/ClientCredentialsGrantVerifier.java	      throw new TokenBadRequestException("invalid_scope", "token request does not contains valid scope");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/RefreshTokenVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("refresh token does not exists (%s)", context.refreshToken().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/RefreshTokenVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("refresh token does not exists (%s)", context.refreshToken().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/RefreshTokenVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("refresh token is expired (%s)", context.refreshToken().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, the client_secret value MUST contain at least 32 octets");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_basic MUST not used");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_post MUST not used");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, shall require and use a key of size 2048 bits or larger for RSA algorithms");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, shall require and use a key of size 160 bits or larger for elliptic curve algorithms");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("invalid_client", String.format("When FAPI Baseline profile, client_id must matched client_assertion sub claim (%s) (%s))", clientConfiguration.clientIdValue(), clientAssertionJwt.subject()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiBaselineVerifier.java	      throw new TokenBadRequestException("invalid_client", String.format("When FAPI Baseline profile, client_id must matched client_assertion iss claim (%s) (%s))", clientConfiguration.clientIdValue(), clientAssertionJwt.iss()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/CibaGrantVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("auth_req_id is invalid (%s) (%s)", context.authReqId().value(), context.requestedClientId().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/CibaGrantVerifier.java	      throw new TokenBadRequestException("invalid_grant", String.format("auth_req_id is invalid (%s) (%s)", context.authReqId().value(), context.requestedClientId().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/CibaGrantVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "backchannel delivery mode is push. token request must not allowed");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/CibaGrantVerifier.java	      throw new TokenBadRequestException("expired_token", "The auth_req_id has expired. The Client will need to make a new Authentication Request.");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/CibaGrantVerifier.java	      throw new TokenBadRequestException("authorization_pending", "The authorization request is still pending as the end-user hasn't yet been authenticated.");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/CibaGrantVerifier.java	      throw new TokenBadRequestException("access_denied", "The end-user denied the authorization request.");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantVerifier.java	      throw new UnSupportedException(String.format("idp server does not supported profile (%s)", authorizationRequest.profile().name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiAdvanceVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_basic MUST not used");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiAdvanceVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_post MUST not used");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiAdvanceVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_jwt MUST not used");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/verifier/AuthorizationCodeGrantFapiAdvanceVerifier.java	      throw new TokenBadRequestException("unauthorized_client", "When FAPI Baseline profile, shall not support public clients");
./libs/idp-server-core/src/main/java/org/idp/server/core/token/service/OAuthTokenCreationServices.java	      throw new UnSupportedException(String.format("unsupported grant_type (%s)", grantType.name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/token/tokenintrospection/validator/TokenIntrospectionValidator.java	      throw new TokenIntrospectionBadRequestException("invalid_request", "token introspection request must contains token parameters");
./libs/idp-server-core/src/main/java/org/idp/server/core/identity/verification/configuration/IdentityVerificationConfiguration.java:      throw new IdentityVerificationApplicationConfigurationNotFoundException("invalid configuration. type	 " + process.name() + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/identity/verification/result/IdentityVerificationSource.java:    throw new UnsupportedOperationException("Unsupported IdentityVerificationSource	 " + value);
./libs/idp-server-core/src/main/java/org/idp/server/core/identity/UserLifecycleManager.java	      throw new UnSupportedException("Transition from " + from + " to " + to + " is not allowed.");
./libs/idp-server-core/src/main/java/org/idp/server/core/security/SecurityEventHooks.java	      throw new UnSupportedException("No executor registered for type " + type);
./libs/idp-server-core/src/main/java/org/idp/server/core/security/hook/ssf/SecurityEventTokenCreator.java	      throw new SecurityEventTokenCreationFailedException("security event token creation is failed.", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/security/factory/SecurityEventDependencyContainer.java:      throw new AuthenticationDependencyMissionException("Missing security event dependency for type	 " + type.getName());
./libs/idp-server-core/src/main/java/org/idp/server/core/multi_tenancy/organization/initial/InitialRegistrationVerifier.java	      throw new InitialRegistrationForbiddenException("tenant is not admin. admin tenant only allowed initial registration request");
./libs/idp-server-core/src/main/java/org/idp/server/core/multi_tenancy/tenant/AdminTenantContext.java	      throw new RuntimeException("AdminTenantContext is not initialized");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/token/AccessTokenCreatable.java	      throw new ConfigurationInvalidException(exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/token/VpTokenCreatable.java	      throw new ConfigurationInvalidException(exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretBasicAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_basic, but request client_secret does not match client_secret");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretBasicAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_basic, but request does not contains client_secret_basic");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/PrivateKeyJwtAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_jwt, but request does not contains client_assertion");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/PrivateKeyJwtAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_jwt, but request does not contains client_assertion_type");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/PrivateKeyJwtAuthenticator.java	      throw new ClientUnAuthorizedException(e.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationVerifier.java	      throw new ClientUnAuthorizedException(String.format("idp does not supported client authentication type (%s)", clientAuthenticationType.name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationVerifier.java	      throw new ClientUnAuthorizedException(String.format("server does not supported client authentication type (%s)", clientAuthenticationType.name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	      throw new ClientUnAuthorizedException("client assertion is invalid, must contains iss claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	    // throw new ClientUnAuthorizedException(
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	      throw new ClientUnAuthorizedException("client assertion is invalid, must contains sub claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	    // throw new ClientUnAuthorizedException(
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	      throw new ClientUnAuthorizedException("client assertion is invalid, must contains aud claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	    throw new ClientUnAuthorizedException("client assertion is invalid, aud claim must be issuer or tokenEndpoint");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	      throw new ClientUnAuthorizedException("client assertion is invalid, must contains jti claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	      throw new ClientUnAuthorizedException("client assertion is invalid, must contains exp claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientAuthenticationJwtValidatable.java	      throw new ClientUnAuthorizedException("client assertion is invalid, jwt is expired");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/TlsClientAuthAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is tls_client_auth, but request does not contains client_cert");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/TlsClientAuthAuthenticator.java	      throw new ClientUnAuthorizedException("client_cert does not match any subject names");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/TlsClientAuthAuthenticator.java	      throw new ClientUnAuthorizedException("client_cert is malformed");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretJwtAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_jwt, but request does not contains client_assertion");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretJwtAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_jwt, but request does not contains client_assertion_type");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretJwtAuthenticator.java	      throw new ClientUnAuthorizedException(e.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/SelfSignedTlsClientAuthAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is self_signed_tls_client_auth, but request does not contains client_cert");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/SelfSignedTlsClientAuthAuthenticator.java	        throw new ClientUnAuthorizedException("unregistered jwk with x5c");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/SelfSignedTlsClientAuthAuthenticator.java	        throw new ClientUnAuthorizedException("multi registered jwk with x5c");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/SelfSignedTlsClientAuthAuthenticator.java	        throw new ClientUnAuthorizedException("client cert does not match registered jwk");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/SelfSignedTlsClientAuthAuthenticator.java	      throw new ClientUnAuthorizedException("registered jwk is invalid");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/SelfSignedTlsClientAuthAuthenticator.java	      throw new ClientUnAuthorizedException("invalid client cert");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretPostAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_post, but request client_secret does not match client_secret");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/clientauthenticator/ClientSecretPostAuthenticator.java	      throw new ClientUnAuthorizedException("client authentication type is client_secret_post, but request does not contains client_secret_post");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/context/RequestObjectPatternContextCreator.java	      throw new OAuthBadRequestException("invalid_request", exception.getMessage(), exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/context/RequestUriPatternContextCreator.java	        throw new OAuthBadRequestException("invalid_request", String.format("request uri does not registered (%s)", parameters.requestUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/context/RequestUriPatternContextCreator.java	      throw new OAuthBadRequestException("invalid_request", exception.getMessage(), exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/context/OAuthRequestContextCreators.java	      throw new UnSupportedException(String.format("not support request pattern (%s)", pattern.name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/validator/OAuthAuthorizeRequestValidator.java	      throw new OAuthBadRequestException("invalid_request", "authorizationRequestIdentifier is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/validator/OAuthAuthorizeRequestValidator.java	      throw new OAuthBadRequestException("invalid_request", "user is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/validator/OAuthAuthorizeRequestValidator.java	      throw new OAuthBadRequestException("invalid_request", "authentication is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/validator/OAuthRequestValidator.java	      throw new OAuthBadRequestException("invalid_request", "authorization request must contains client_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/validator/OAuthRequestValidator.java	      throw new OAuthBadRequestException("invalid_request", String.format("authorization request must not contains duplicate value; keys (%s)", keysValue));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/response/JarmCreatable.java	      throw new ConfigurationInvalidException(exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/response/JarmCreatable.java	      throw new ConfigurationInvalidException(exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/response/AuthorizationResponseCreators.java	      throw new UnSupportedException(String.format("not support request type (%s)", responseType.value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/identity/IdTokenCreatable.java	      throw new ConfigurationInvalidException(exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("login_required", "invalid session, session is not registered", this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("login_required", "invalid session, session is invalid", this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("interaction_required", "authorization granted is nothing", this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("interaction_required", String.format("authorization request contains unauthorized scopes (%s)", unauthorizedScopes.toStringValues()), this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("interaction_required", String.format("authorization request contains unauthorized id_token claims (%s)", unauthorizedIdTokenClaims.toStringValues()), this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("interaction_required", String.format("authorization request contains unauthorized userinfo claims (%s)", unauthorizedIdTokenClaims.toStringValues()), this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthRequestContext.java	      throw new OAuthRedirectableBadRequestException("interaction_required", "authorization request contains unauthorized consent", this);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/discovery/DiscoveryProtocols.java	      throw new UnSupportedException("Unknown authorization provider " + provider.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/discovery/JwksResponseCreator.java	      throw new RuntimeException(e);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/handler/UserinfoHandler.java	      throw new TokenInvalidException("not found token");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/verifier/UserinfoVerifier.java	      throw new TokenInvalidException("not found user");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/verifier/UserinfoVerifier.java	      throw new TokenInvalidException("not found token");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/verifier/UserinfoVerifier.java	      throw new TokenInvalidException("token is expired");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/verifier/UserinfoVerifier.java	      throw new VerifiableCredentialTokenInvalidException("access token is sender constrained, but mtls client cert does not exists");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/verifier/UserinfoVerifier.java	        throw new VerifiableCredentialTokenInvalidException("access token and mtls client cert is unmatch");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/verifier/UserinfoVerifier.java	      throw new VerifiableCredentialTokenInvalidException("access token is sender constrained, but mtls client cert is invalid format", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/userinfo/UserinfoProtocols.java	      throw new UnSupportedException("Unknown authorization provider " + provider.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/OAuth2RequestVerifier.java	        throw new OAuthBadRequestException("invalid_request", String.format("redirect_uri must not fragment (%s)", context.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/OAuth2RequestVerifier.java	      throw new OAuthBadRequestException("invalid_request", String.format("authorization request redirect_uri is invalid (%s)", context.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/OAuth2RequestVerifier.java	      throw new OAuthBadRequestException("invalid_request", String.format("authorization request redirect_uri does not match registered redirect uris (%s)", context.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/OAuth2RequestVerifier.java	      throw new OAuthBadRequestException("invalid_request", "on multiple registered redirect uris, authorization request redirect_uri must contains");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, request object must signed with asymmetric key");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, must contains iss claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, iss claim must be client_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, must contains aud claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	    throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, aud claim must be issuer");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, must contains jti claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, must contains exp claim in jwt payload");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifyable.java	      throw new RequestObjectInvalidException("invalid_request_object", "request object is invalid, jwt is expired");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/VerifiableCredentialVerifier.java	        throw new AuthorizationDetailsInvalidException("invalid_authorization_details", "authorization details does not contains type");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/VerifiableCredentialVerifier.java	        throw new AuthorizationDetailsInvalidException("invalid_authorization_details", String.format("unsupported authorization details type (%s)", authorizationDetail.type()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/VerifiableCredentialVerifier.java	        throw new AuthorizationDetailsInvalidException("invalid_authorization_details", String.format("unauthorized authorization details type (%s)", authorizationDetail.type()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/VerifiableCredentialVerifier.java	      throw new VerifiableCredentialInvalidException("invalid_request", "unsupported verifiable credential");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/OAuthAuthorizationDetailsVerifier.java	      throw new OAuthRedirectableBadRequestException(exception.error(), exception.errorDescription(), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/OAuthVerifiableCredentialVerifier.java	      throw new OAuthRedirectableBadRequestException(exception.error(), exception.errorDescription(), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/OAuthVerifiableCredentialVerifier.java	      throw new OAuthRedirectableBadRequestException(exception.error(), exception.errorDescription(), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/RequestObjectVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", exception.getMessage(), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/AuthorizationDetailsVerifier.java	        throw new AuthorizationDetailsInvalidException("invalid_authorization_details", "authorization details does not contains type");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/AuthorizationDetailsVerifier.java	        throw new AuthorizationDetailsInvalidException("invalid_authorization_details", String.format("unsupported authorization details type (%s)", authorizationDetail.type()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/extension/AuthorizationDetailsVerifier.java	        throw new AuthorizationDetailsInvalidException("invalid_authorization_details", String.format("unauthorized authorization details type (%s)", authorizationDetail.type()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	        throw new OAuthBadRequestException("unauthorized_client", "When FAPI Advance profile and jarm mode, client config must have authorization_signed_response_alg");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	        throw new OAuthBadRequestException("unauthorized_client", "When FAPI Advance profile and jarm mode, server jwks must have client authorization_signed_response_alg");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Advance profile, shall require a JWS signed JWT request object passed by value with the request parameter or by reference with the request_uri parameter", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	    throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Advance profile, shall require the response_type value code id_token, or the response_type value code in conjunction with the response_mode value jwt", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Advance profile, shall only issue sender-constrained access tokens, but server tls_client_certificate_bound_access_tokens is false", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Advance profile, shall only issue sender-constrained access tokens, but client tls_client_certificate_bound_access_tokens is false", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", "When FAPI Advance profile, shall require the request object to contain an exp claim", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", "When FAPI Advance profile, shall require the request object to contain an nbf claim", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", "When FAPI Advance profile, shall require the request object to contain an exp claim that has a lifetime of no longer than 60 minutes after the nbf claim", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", "When FAPI Advance profile, shall require the request object to contain an aud claim", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", String.format("When FAPI Advance profile, shall require the aud claim in the request object to be, or to be an array containing, the OP's Issuer Identifier URL (%s)", String.join(" ", aud)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", "When FAPI Advance profile, client_secret_basic MUST not used", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", "When FAPI Advance profile, client_secret_post MUST not used", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", "When FAPI Advance profile, client_secret_jwt MUST not used", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", "When FAPI Advance profile, shall not support public clients", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", "When FAPI Advance profile, shall require the request object to contain an nbf claim", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiAdvanceVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request_object", "When FAPI Advance profile, shall require the request object to contain an nbf claim that is no longer than 60 minutes in the past", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/OAuthRequestVerifier.java	      throw new UnSupportedException(String.format("idp server unsupported profile (%s)", context.profile().name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthBadRequestException("invalid_request", "When FAPI Baseline profile, shall require redirect URIs to be pre-registered");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthBadRequestException("invalid_request", "When FAPI Baseline profile, shall require the redirect_uri in the authorization request");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthBadRequestException("invalid_request", String.format("When FAPI Baseline profile, shall require the value of redirect_uri to exactly match one of the pre-registered redirect URIs (%s)", context.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthBadRequestException("invalid_request", String.format("When FAPI Baseline profile, shall shall require redirect URIs to use the https scheme (%s)", context.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_basic MUST not used", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", "When FAPI Baseline profile, client_secret_post MUST not used", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Baseline profile, authorization request must contains code_challenge and code_challenge_method(S256).", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Baseline profile, shall require RFC7636 with S256 as the code challenge method.", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Baseline profile, shall require the nonce parameter defined in Section 3.1.2.1 of OIDC in the authentication request.", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/FapiBaselineVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When FAPI Baseline profile, shall require the nonce parameter defined in Section 3.1.2.1 of OIDC in the authentication request.", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OAuthRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "response type is required in authorization request", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OAuthRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", String.format("response type is unknown type (%s)", context.getParams(OAuthRequestKey.response_type)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OAuthRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("unsupported_response_type", String.format("authorization server is unsupported response_type (%s)", responseType.name()), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OAuthRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("unauthorized_client", String.format("client is unauthorized response_type (%s)", responseType.name()), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OAuthRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_scope", String.format("authorization request does not contains valid scope (%s)", context.getParams(OAuthRequestKey.scope)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthBadRequestException("invalid_request", "oidc profile authorization request must contains redirect_uri param");
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthBadRequestException("invalid_request", String.format("authorization request redirect_uri does not register in client configuration (%s)", context.redirectUri().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", String.format("When using this flow and client application is web application, the Redirection URI MUST NOT use the http scheme (%s)", context.redirectUri().value()), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", "When using implicit flow or hybrid flow, authorization request must contains nonce.", context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", String.format("authorization request display is defined that page, popup, touch, wap, but request display is (%s)", context.getParams(OAuthRequestKey.display)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", String.format("authorization request prompt is defined that none, login, consent, select_account, but request prompt is (%s)", context.getParams(OAuthRequestKey.prompt)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", String.format("authorization request must not contains none with any other (%s)", context.getParams(OAuthRequestKey.prompt)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/verifier/base/OidcRequestBaseVerifier.java	      throw new OAuthRedirectableBadRequestException("invalid_request", String.format("authorization request max_age is invalid (%s)", context.getParams(OAuthRequestKey.max_age)), context);
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/OAuthProtocols.java	      throw new UnSupportedException("Unknown authorization provider " + provider.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/oidc/gateway/RequestObjectHttpClient.java	      throw new RuntimeException(e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/VerifiableCredentialCreators.java	      throw new RuntimeException(String.format("unsupported format (%s)", format.name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/BatchVerifiableCredentialVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "unsupported verifiable credential");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/BatchVerifiableCredentialVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", exception.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	      throw new TokenInvalidException("not found token");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	      throw new TokenInvalidException("token is expired");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	      throw new VerifiableCredentialTokenInvalidException("access token is sender constrained, but mtls client cert does not exists");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	        throw new VerifiableCredentialTokenInvalidException("access token and mtls client cert is unmatch");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	      throw new VerifiableCredentialTokenInvalidException("access token is sender constrained, but mtls client cert is invalid format", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	      throw new VerifiableCredentialTokenInvalidException("access token have to contain authorization details at credential endpoint");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialOAuthTokenVerifier.java	      throw new VerifiableCredentialTokenInvalidException("access token have to contain authorization details at credential endpoint");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/DeferredVerifiableCredentialVerifier.java	      throw new VerifiableCredentialBadRequestException("issuance_pending", "The credential issuance is still pending");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "unsupported verifiable credential");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", exception.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "credential request must contains format");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", String.format("unsupported credential format (%s)", request.format().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "When credential request contains proof, proof entity must define proof_type");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "When credential request proof_type is jwt, proof entity must contains jwt claim");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "When credential request proof_type is cwt, proof entity must contains cwt claim");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "proof of jws alg must be not none alg");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "proof of jws header must contains alg claim");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "proof of jws header must contains kid or jwk or x5c claim");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "proof of jws header must not contains multi key claim  kid, jwk, x5c");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "proof of jws header must contains type claim");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "type claim must be openid4vci-proof+jwt");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "proof of jws alg must be not symmetric alg");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "iss claims does not contain, iss is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "iss claims must be client_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "aud claims does not contain, aud is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "aud must be the Credential Issuer Identifier.");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "iat claims does not contains, iat is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "nonce claims does not contains, nonce is required");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "nonce claims does not match c_nonce, the value is a c_nonce provided by the credential issuer.");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", e.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", e.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/VerifiableCredentialJwtProofVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", e.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/DeferredVerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "unsupported verifiable credential");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/DeferredVerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_request", "transaction_id does not contains, deferred credential request must contain transaction_id");
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/verifier/DeferredVerifiableCredentialRequestVerifier.java	      throw new VerifiableCredentialBadRequestException("invalid_transaction_id", String.format("not found verifiable credential transaction (%s)", parameters.transactionId().value()));
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/VerifiableCredentialRequestTransformable.java	          throw new RuntimeException(e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/VerifiableCredentialRequestTransformable.java	      throw new VerifiableCredentialRequestInvalidException("invalid batch credential request, can not pared", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/VerifiableCredentialRequestTransformable.java	      throw new VerifiableCredentialRequestInvalidException("invalid verifiable credential request, can not parsed", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/VerifiableCredentialRequestTransformable.java	      throw new VerifiableCredentialRequestInvalidException("invalid proof, can not parsed", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/VerifiableCredentialRequestTransformable.java	      throw new VerifiableCredentialRequestInvalidException("invalid jwk", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/VerifiableCredentialRequestTransformable.java	      throw new VerifiableCredentialRequestInvalidException("invalid x5c", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/verifiable_credential/request/BatchCredentialRequestParameters.java	      throw new RuntimeException(e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/OidcSsoExecutors.java	      throw new UnSupportedException("No OidcSsoExecutor found for provider " + provider.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/FacebookOidcExecutor.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/FacebookOidcExecutor.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/FacebookOidcExecutor.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/FacebookOidcExecutor.java	      throw new HttpClientErrorException(body, httpResponse.statusCode());
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/FacebookOidcExecutor.java	      throw new HttpClientErrorException(body, httpResponse.statusCode());
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/OidcFederationInteractor.java	      throw new OidcInvalidIdTokenException("failed to parse id_token", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/StandardOidcExecutor.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/StandardOidcExecutor.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/StandardOidcExecutor.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/StandardOidcExecutor.java	      throw new HttpClientErrorException(body, httpResponse.statusCode());
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/oidc/StandardOidcExecutor.java	      throw new HttpClientErrorException(body, httpResponse.statusCode());
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/FederationDependencyContainer.java:      throw new SsoDependencyMissionException("Missing dependency for type	 " + type.getName());
./libs/idp-server-core/src/main/java/org/idp/server/core/federation/FederationInteractors.java:      throw new UnSupportedException("Unknown SSO type	 " + type.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/AuthenticationInteractors.java	      throw new MfaInteractorUnSupportedException("No OAuthInteractor found for type " + type.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/sms/SmsAuthenticationExecutors.java:      throw new UnSupportedException("No sms authentication executor found for type	 " + type.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/sms/SmsAuthenticationConfiguration.java:      throw new SmsAuthenticationDetailsConfigNotFoundException("invalid configuration. key	 " + type.name() + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/sms/external/ExternalSmsAuthenticationConfiguration.java:      throw new SmsAuthenticationExecutionConfigNotFoundException("invalid configuration. type	 " + executionType + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/notification/EmailSenderType.java	    throw new UnSupportedException("No EmailSenderType found for type " + type);
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/notification/EmailSenders.java	      throw new UnSupportedException("No EmailSender found for type " + type);
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/fidouaf/FidoUafExecutors.java	      throw new UnSupportedException("No fido-uaf executor found for type " + type.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/fidouaf/FidoUafConfiguration.java:      throw new WebAuthnCredentialNotFoundException("invalid configuration. key	 " + type.name() + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/fidouaf/external/ExternalFidoUafServerConfiguration.java:      throw new IdentityVerificationApplicationConfigurationNotFoundException("invalid configuration. type	 " + executionType + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/webauthn/WebAuthnConfiguration.java:      throw new WebAuthnCredentialNotFoundException("invalid configuration. key	 " + key.value() + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/webauthn/WebAuthnExecutors.java:      throw new UnSupportedException("Unsupported web authn executor type	 " + type);
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/device/AuthenticationDeviceNotifiers.java	      throw new UnSupportedException("Authentication device notifier " + channel.name() + " not supported");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/device/AuthenticationDeviceNotificationConfiguration.java:      throw new WebAuthnCredentialNotFoundException("invalid configuration. key	 " + channel.name() + " is unregistered.");
./libs/idp-server-core/src/main/java/org/idp/server/core/authentication/factory/AuthenticationDependencyContainer.java:      throw new AuthenticationDependencyMissionException("Missing dependency for type	 " + type.getName());
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/context/RequestObjectPatternContextCreator.java	      throw new BackchannelAuthenticationBadRequestException("invalid_request_object", exception.getMessage(), exception);
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/context/CibaContextCreators.java	      throw new UnSupportedException(String.format("unsupported ciba request pattern (%s)", pattern.name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/user/UserHintResolvers.java:      throw new UnSupportedException("Unsupported user hint type	 " + type.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/CibaProtocols.java	      throw new UnSupportedException("Unknown authorization provider " + provider.name());
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/verifier/CibaRequestObjectVerifier.java	      throw new BackchannelAuthenticationBadRequestException("invalid_request_object", exception.getMessage());
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/verifier/CibaRequestVerifier.java	      throw new UnSupportedException(String.format("unsupported ciba profile (%s)", context.profile().name()));
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/verifier/CibaRequestBaseVerifier.java	      throw new BackchannelAuthenticationBadRequestException("unauthorized_client", "authorization server is unsupported ciba grant");
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/verifier/CibaRequestBaseVerifier.java	      throw new BackchannelAuthenticationBadRequestException("unauthorized_client", "client is unauthorized ciba grant");
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/verifier/CibaRequestBaseVerifier.java	      throw new BackchannelAuthenticationBadRequestException("invalid_scope", "backchannel request does not contains openid scope. OpenID Connect implements authentication as an extension to OAuth 2.0 by including the openid scope value in the authorization requests.");
./libs/idp-server-core/src/main/java/org/idp/server/core/ciba/verifier/CibaRequestBaseVerifier.java	      throw new BackchannelAuthenticationBadRequestException("invalid_request", "backchannel request does not have any hint, must contains login_hint or login_hint_token or id_token_hint");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Transaction already started");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Transaction already started");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("No active transaction");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Failed to commit transaction", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Failed to rollback transaction", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	        throw new SqlRuntimeException("Failed to close connection", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Database connection is not configured. Call setConnectionConfig() first.");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Failed to create connection", exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Transaction already started in this thread.");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("No active transaction to commit.");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Failed to commit transaction", exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("No active transaction to rollback.");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Failed to rollback transaction", exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	        throw new SqlRuntimeException("Failed to close connection", exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("No active transaction. Call beginTransaction() first.");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	        throw new SqlTooManyResultsException(String.format("find results (%d)", results.size()));
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/DefaultDbDbConnectionProvider.java	      throw new SqlRuntimeException("Failed to get DB connection", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/datasource/DatabaseType.java:    throw new UnSupportedException("Unsupported database type	 " + databaseType);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/crypto/AesCipher.java:      throw new AesCryptoRuntimeException("Error while encrypting data	 " + plainText, exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/crypto/AesCipher.java:      throw new AesCryptoRuntimeException("Error while decrypting data	 " + data, exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/oauth/ClientCredentialsAuthorizationResolver.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/oauth/OAuthAuthorizationType.java:    throw new UnsupportedOperationException("Unsupported OAuth authorization type	 " + type);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/oauth/ResourceOwnerPasswordCredentialsAuthorizationResolver.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/oauth/OAuthAuthorizationResolvers.java:      throw new UnSupportedException("Unsupported OAuth authorization type	 " + type.name());
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/hash/HashAlgorithm.java	      throw new RuntimeException(exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/dependency/ApplicationComponentContainer.java:      throw new ApplicationComponentMissionException("Missing datasource for type	 " + type.getName());
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/dependency/ApplicationComponentDependencyContainer.java:      throw new ApplicationComponentDependencyMissionException("Missing dependency for type	 " + type.getName());
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JwsContextCreator.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifier.java	      throw new JoseInvalidException("failed create JsonWebSignatureVerifier ,invalid json web signature header and public key", exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifier.java	      throw new JoseInvalidException("invalid signature");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebEncDecrypterFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignature.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignature.java	      throw new RuntimeException(e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignature.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/NestedJsonWebEncryptionCreator.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JweContextCreator.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JwkParser.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JwkParser.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JwkParser.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifierFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifierFactory.java	      throw new JsonWebKeyNotFoundException(String.format("not found jwk kid (%s) algorithm (%s)", keyId, algorithm));
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebEncrypterFactory.java	        throw new UnSupportedException(String.format("unsupported encryption alg (%s)", jsonWebKeyType.name()));
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JoseType.java:        throw new JoseInvalidException("Unexpected algorithm type	 " + alg);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JoseType.java	      throw new JoseInvalidException("parse failed, invalid jose header", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new RuntimeException(e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	        throw new UnSupportedException(String.format("unsupported sign key (%s)", jsonWebKeyType.name()));
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/x509/X509SubjectAlternativeNameType.java	    throw new X509CertInvalidException("unknown type");
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/x509/X509Certification.java	      throw new X509CertInvalidException(e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/x509/X509SubjectAlternativeNames.java	      throw new X509CertInvalidException(exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/vc/VerifiableCredentialFormat.java	    throw new VerifiableCredentialFormatInvalidException(String.format("invalid verifiable credential format (%s)", value));
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/type/AuthorizationFlow.java	    throw new UnSupportedException(String.format("unsupported authorization flow (%s)", authorizationFlow));
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/http/HttpRequestExecutor.java	      throw new InvalidConfigurationException("HttpRequestUrl is invalid.", e);
./libs/idp-server-core-supporter/build/spotless/spotlessJava/src/main/java/org/idp/server/basic/http/HttpRequestExecutor.java	      throw new HttpNetworkErrorException("Http request is failed.", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Transaction already started");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Transaction already started");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("No active transaction");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Failed to commit transaction", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	      throw new SqlRuntimeException("Failed to rollback transaction", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/TransactionManager.java	        throw new SqlRuntimeException("Failed to close connection", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Database connection is not configured. Call setConnectionConfig() first.");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Failed to create connection", exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Transaction already started in this thread.");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("No active transaction to commit.");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Failed to commit transaction", exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("No active transaction to rollback.");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("Failed to rollback transaction", exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	        throw new SqlRuntimeException("Failed to close connection", exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/ReaderTransactionManager.java	      throw new SqlRuntimeException("No active transaction. Call beginTransaction() first.");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	        throw new SqlTooManyResultsException(String.format("find results (%d)", results.size()));
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/SqlExecutor.java	      throw new SqlRuntimeException(exception.getMessage(), exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/DefaultDbDbConnectionProvider.java	      throw new SqlRuntimeException("Failed to get DB connection", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/datasource/DatabaseType.java:    throw new UnSupportedException("Unsupported database type	 " + databaseType);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/crypto/HmacHasher.java	      throw new HmacHasherRuntimeException("Failed to compute HMAC", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/crypto/AesCipher.java:      throw new AesCryptoRuntimeException("Error while encrypting data	 " + plainText, exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/crypto/AesCipher.java:      throw new AesCryptoRuntimeException("Error while decrypting data	 " + data, exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/oauth/ClientCredentialsAuthorizationResolver.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/oauth/OAuthAuthorizationType.java:    throw new UnsupportedOperationException("Unsupported OAuth authorization type	 " + type);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/oauth/ResourceOwnerPasswordCredentialsAuthorizationResolver.java	      throw new HttpNetworkErrorException("unexpected network error", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/oauth/OAuthAuthorizationResolvers.java:      throw new UnSupportedException("Unsupported OAuth authorization type	 " + type.name());
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/hash/HashAlgorithm.java	      throw new RuntimeException(exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/dependency/ApplicationComponentContainer.java:      throw new ApplicationComponentMissionException("Missing datasource for type	 " + type.getName());
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/dependency/ApplicationComponentDependencyContainer.java:      throw new ApplicationComponentDependencyMissionException("Missing dependency for type	 " + type.getName());
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebEncryptionDecrypter.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebToken.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebToken.java	      throw new RuntimeException(e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JwsContextCreator.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifier.java	      throw new JoseInvalidException("failed create JsonWebSignatureVerifier ,invalid json web signature header and public key", exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifier.java	      throw new JoseInvalidException("invalid signature");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebEncryption.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebEncryption.java	      throw new RuntimeException(e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebEncDecrypterFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignature.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignature.java	      throw new RuntimeException(e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignature.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/NestedJsonWebEncryptionCreator.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JweContextCreator.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JwkParser.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JwkParser.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JwkParser.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifierFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureVerifierFactory.java	      throw new JsonWebKeyNotFoundException(String.format("not found jwk kid (%s) algorithm (%s)", keyId, algorithm));
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebKey.java	        default -> throw new JsonWebKeyInvalidException("unsupported key type");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebKey.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebKey.java	        default -> throw new JsonWebKeyInvalidException("unsupported key type");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebKey.java	      throw new JsonWebKeyInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebEncrypterFactory.java	        throw new UnSupportedException(String.format("unsupported encryption alg (%s)", jsonWebKeyType.name()));
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JoseType.java:        throw new JoseInvalidException("Unexpected algorithm type	 " + alg);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JoseType.java	      throw new JoseInvalidException("parse failed, invalid jose header", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new RuntimeException(e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	      throw new JoseInvalidException(e.getMessage(), e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/jose/JsonWebSignatureFactory.java	        throw new UnSupportedException(String.format("unsupported sign key (%s)", jsonWebKeyType.name()));
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/x509/X509SubjectAlternativeNameType.java	    throw new X509CertInvalidException("unknown type");
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/x509/X509Certification.java	      throw new X509CertInvalidException(e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/x509/X509SubjectAlternativeNames.java	      throw new X509CertInvalidException(exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/json/JsonConverter.java	      throw new JsonRuntimeException(exception);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/vc/VerifiableCredentialFormat.java	    throw new VerifiableCredentialFormatInvalidException(String.format("invalid verifiable credential format (%s)", value));
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/type/AuthorizationFlow.java	    throw new UnSupportedException(String.format("unsupported authorization flow (%s)", authorizationFlow));
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/http/HttpRequestExecutor.java	      throw new InvalidConfigurationException("HttpRequestUrl is invalid.", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/http/HttpRequestExecutor.java	      throw new HttpNetworkErrorException("Http request is failed.", e);
./libs/idp-server-core-supporter/src/main/java/org/idp/server/basic/http/UriWrapper.java	      throw new InvalidUriException(exception);
./libs/idp-server-webauthn4j-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jRegistrationManager.java	      throw new RuntimeException(e);
./libs/idp-server-webauthn4j-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jRegistrationManager.java	      throw new WebAuthn4jBadRequestException("webauthn verification is failed", e);
./libs/idp-server-webauthn4j-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jRegistrationManager.java	      throw new WebAuthn4jBadRequestException("webauthn registration request is invalid", e);
./libs/idp-server-webauthn4j-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jAuthenticationManager.java	      throw new WebAuthn4jBadRequestException("Failed to verify authentication data", e);
./libs/idp-server-webauthn4j-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jAuthenticationManager.java	      throw new WebAuthn4jBadRequestException("Failed to parse authentication response", e);
./libs/idp-server-webauthn4j-adapter/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jRegistrationManager.java	      throw new RuntimeException(e);
./libs/idp-server-webauthn4j-adapter/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jRegistrationManager.java	      throw new WebAuthn4jBadRequestException("webauthn verification is failed", e);
./libs/idp-server-webauthn4j-adapter/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jRegistrationManager.java	      throw new WebAuthn4jBadRequestException("webauthn registration request is invalid", e);
./libs/idp-server-webauthn4j-adapter/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jAuthenticationManager.java	      throw new WebAuthn4jBadRequestException("Failed to verify authentication data", e);
./libs/idp-server-webauthn4j-adapter/src/main/java/org/idp/server/authenticators/webauthn4j/WebAuthn4jAuthenticationManager.java	      throw new WebAuthn4jBadRequestException("Failed to parse authentication response", e);
./libs/idp-server-use-cases/build/spotless/spotlessJava/src/main/java/org/idp/server/usecases/TenantAwareEntryServiceProxy.java	    throw new MissingRequiredTenantIdentifierException("Missing required TenantIdentifier. Please ensure it is explicitly passed to the service.");
./libs/idp-server-use-cases/build/spotless/spotlessJava/src/main/java/org/idp/server/usecases/OAuthFlowEntryService.java	      throw new OAuthBadRequestException("invalid_request", "session expired");
./libs/idp-server-use-cases/build/spotless/spotlessJava/src/main/java/org/idp/server/usecases/OperatorAuthenticationEntryService.java	      throw new UnauthorizedException("error=invalid_token error_description=token is undefined");
./libs/idp-server-use-cases/build/spotless/spotlessJava/src/main/java/org/idp/server/usecases/OperatorAuthenticationEntryService.java	      throw new UnauthorizedException("error=invalid_token error_description=token is undefined");
./libs/idp-server-use-cases/src/main/java/org/idp/server/usecases/TenantAwareEntryServiceProxy.java	    throw new MissingRequiredTenantIdentifierException("Missing required TenantIdentifier. Please ensure it is explicitly passed to the service.");
./libs/idp-server-use-cases/src/main/java/org/idp/server/usecases/OAuthFlowEntryService.java	      throw new OAuthBadRequestException("invalid_request", "session expired");
./libs/idp-server-use-cases/src/main/java/org/idp/server/usecases/OperatorAuthenticationEntryService.java	      throw new UnauthorizedException("error=invalid_token error_description=token is undefined");
./libs/idp-server-use-cases/src/main/java/org/idp/server/usecases/OperatorAuthenticationEntryService.java	      throw new UnauthorizedException("error=invalid_token error_description=token is undefined");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/config/IdentityVerificationConfigurationQueryDataSource.java	      throw new IdentityVerificationConfigurationNotFoundException(String.format("IdentityVerification Configuration is Not Found (%s) (%s)", tenant.identifierValue(), type.name()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/application/query/IdentityVerificationApplicationQueryDataSource.java	      throw new IdentityVerificationApplicationNotFoundException(String.format("IdentityVerificationApplication not found (%s)", identifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/application/query/IdentityVerificationApplicationQueryDataSource.java	      throw new IdentityVerificationApplicationNotFoundException(String.format("IdentityVerificationApplication not found (%s)", identifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/identity/command/UserCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/config/HikariConnectionProvider.java	      throw new SqlRuntimeException("Failed to get DB connection", e);
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/organization/OrganizationDataSource.java	      throw new OrganizationNotFoundException("Organization not found");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/tenant/TenantDataSource.java	      throw new TenantNotFoundException(String.format("Tenant is not found (%s)", tenantIdentifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/tenant/TenantDataSource.java	      throw new TenantNotFoundException("Admin Tenant is unregistered.");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/server/ServerConfigurationDataSource.java	      throw new ServerConfigurationNotFoundException(String.format("unregistered server configuration (%s)", tenant.identifierValue()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/client/ClientConfigurationDataSource.java	      throw new ClientConfigurationNotFoundException(String.format("unregistered client (%s)", requestedClientId.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/client/ClientConfigurationDataSource.java	      throw new ClientConfigurationNotFoundException(String.format("unregistered client (%s)", clientIdentifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/oidc/request/AuthorizationRequestDataSource.java	      throw new OAuthException("invalid_request", String.format("not found oauth request (%s)", authorizationRequestIdentifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/verifiable_credential/VerifiableCredentialTransactionDataSource.java	      throw new NotFoundException(String.format("not found verifiable credential transaction (%s)", transactionId.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/federation/config/FederationConfigurationQueryDataSource.java	      throw new FederationConfigurationNotFoundException(String.format("federation configuration is not found (%s) (%s) (%s)", tenant.identifierValue(), federationType.name(), ssoProvider.name()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/federation/session/query/SsoSessionQueryDataSource.java	      throw new SsoSessionNotFoundException(String.format("federation sso session is not found (%s)", ssoSessionIdentifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/authentication/transaction/command/AuthenticationTransactionCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/authentication/transaction/query/AuthenticationTransactionQuerySqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/authentication/transaction/query/AuthenticationTransactionQueryDataSource.java:      throw new AuthenticationTransactionNotFoundException("Authentication transaction not found for identifier	 " + identifier.value());
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/authentication/config/AuthenticationConfigurationQueryDataSource.java	      throw new AuthenticationConfigurationNotFoundException(String.format("Mfa Configuration is Not Found (%s) (%s)", tenant.identifierValue(), type));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/authentication/interaction/query/AuthenticationInteractionQueryDataSource.java	      throw new MfaTransactionNotFoundException(String.format("Mfa transaction is Not Found (%s) (%s)", identifier.value(), type));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/datasource/ciba/grant/CibaGrantDataSource.java	      throw new CibaGrantNotFoundException(String.format("ciba grant not found (%s)", backchannelAuthenticationRequestIdentifier.value()));
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("DD-API-KEY header is required.");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body ddsource is required.");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body ddtags is required.");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body ddsource is required.");
./libs/idp-server-core-adapter/build/spotless/spotlessJava/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body service is required.");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/token/OAuthTokenSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/role/RoleSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/UserSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/result/command/IdentityVerificationResultCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/config/IdentityVerificationConfigSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/config/IdentityVerificationConfigurationQueryDataSource.java	      throw new IdentityVerificationConfigurationNotFoundException(String.format("IdentityVerification Configuration is Not Found (%s) (%s)", tenant.identifierValue(), type.name()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/application/command/IdentityVerificationApplicationCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/application/query/IdentityVerificationApplicationQuerySqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/application/query/IdentityVerificationApplicationQueryDataSource.java	      throw new IdentityVerificationApplicationNotFoundException(String.format("IdentityVerificationApplication not found (%s)", identifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/verification/application/query/IdentityVerificationApplicationQueryDataSource.java	      throw new IdentityVerificationApplicationNotFoundException(String.format("IdentityVerificationApplication not found (%s)", identifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/command/UserCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/UserQueryDataSource.java	      throw new UserNotFoundException(String.format("not found user (%s)", userIdentifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/UserQueryDataSource.java	      throw new UserTooManyFoundResultException(exception.getMessage());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/UserQueryDataSource.java	      throw new UserTooManyFoundResultException(exception.getMessage());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/permission/PermissionSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/identity/event/UserLifecycleEventResultSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/config/HikariConnectionProvider.java	      throw new SqlRuntimeException("Failed to get DB connection", e);
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/security/event/SecurityEventSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/security/hook/SecurityEventHoolResultSqlExecutors.java	      throw new IllegalArgumentException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/organization/OrganizationDataSource.java	      throw new OrganizationNotFoundException("Organization not found");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/organization/OrganizationSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/tenant/TenantDataSource.java	      throw new TenantNotFoundException(String.format("Tenant is not found (%s)", tenantIdentifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/tenant/TenantDataSource.java	      throw new TenantNotFoundException("Admin Tenant is unregistered.");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/multi_tenancy/tenant/TenantSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/server/ServerConfigSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/server/ServerConfigurationDataSource.java	      throw new ServerConfigurationNotFoundException(String.format("unregistered server configuration (%s)", tenant.identifierValue()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/client/ClientConfigurationDataSource.java	      throw new ClientConfigurationNotFoundException(String.format("unregistered client (%s)", requestedClientId.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/client/ClientConfigurationDataSource.java	      throw new ClientConfigurationNotFoundException(String.format("unregistered client (%s)", clientIdentifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/configuration/client/ClientConfigSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/code/AuthorizationCodeGrantExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/request/AuthorizationRequestDataSource.java	      throw new OAuthException("invalid_request", String.format("not found oauth request (%s)", authorizationRequestIdentifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/oidc/request/AuthorizationRequestSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/verifiable_credential/VerifiableCredentialTransactionDataSource.java	      throw new NotFoundException(String.format("not found verifiable credential transaction (%s)", transactionId.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/verifiable_credential/VerifiableCredentialTransactionSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/federation/config/FederationConfigurationQuerySqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/federation/config/FederationConfigurationQueryDataSource.java	      throw new FederationConfigurationNotFoundException(String.format("federation configuration is not found (%s) (%s) (%s)", tenant.identifierValue(), federationType.name(), ssoProvider.name()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/federation/session/command/SsoSessionCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/federation/session/query/SsoSessionQuerySqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/federation/session/query/SsoSessionQueryDataSource.java	      throw new SsoSessionNotFoundException(String.format("federation sso session is not found (%s)", ssoSessionIdentifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/grant_management/AuthorizationGrantedSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/transaction/command/AuthenticationTransactionCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/transaction/query/AuthenticationTransactionQuerySqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/transaction/query/AuthenticationTransactionQueryDataSource.java:      throw new AuthenticationTransactionNotFoundException("Authentication transaction not found for identifier	 " + identifier.value());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/config/AuthenticationConfigSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/config/AuthenticationConfigurationQueryDataSource.java	      throw new AuthenticationConfigurationNotFoundException(String.format("Mfa Configuration is Not Found (%s) (%s)", tenant.identifierValue(), type));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/interaction/command/AuthenticationInteractionCommandSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/interaction/query/AuthenticationInteractionQuerySqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/authentication/interaction/query/AuthenticationInteractionQueryDataSource.java	      throw new MfaTransactionNotFoundException(String.format("Mfa transaction is Not Found (%s) (%s)", identifier.value(), type));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/ciba/request/BackchannelAuthenticationRequestSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/ciba/grant/CibaGrantSqlExecutors.java	      throw new UnSupportedException("Unknown dialect " + databaseType.name());
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/datasource/ciba/grant/CibaGrantDataSource.java	      throw new CibaGrantNotFoundException(String.format("ciba grant not found (%s)", backchannelAuthenticationRequestIdentifier.value()));
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("DD-API-KEY header is required.");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body ddsource is required.");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body ddtags is required.");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body ddsource is required.");
./libs/idp-server-core-adapter/src/main/java/org/idp/server/core/adapters/security/hook/DatadogLogStreamExecutorSecurityEvent.java	      throw new DatadogConfigurationInvalidException("static body service is required.");
